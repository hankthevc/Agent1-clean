/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for more information on configuring workbox.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

/**
 * PRECACHING
 * 
 * This is the most important part of the PWA setup.
 * Workbox will automatically cache all the files in the manifest
 * generated by the build process (e.g., JS, CSS, images, index.html).
 * This ensures the app shell loads instantly on subsequent visits,
 * even when offline.
 */
precacheAndRoute(self.__WB_MANIFEST);

/**
 * APP SHELL ROUTING
 * 
 * This ensures that all navigation requests (e.g., visiting a deep link)
 * are served with the main index.html file. This is essential for
 * single-page applications (SPAs) like this one, allowing React Router
 * to take over and handle the client-side routing.
 */
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

/**
 * RUNTIME CACHING FOR IMAGES
 * 
 * This rule defines a caching strategy for images.
 * We use StaleWhileRevalidate, which means:
 * 1. The browser will first try to get the image from the cache.
 * 2. If it's there, it will be served instantly (fast!).
 * 3. In the background, it will make a network request to see if there's a new version.
 * 4. If a new version is found, it updates the cache for the next visit.
 * 
 * This is a great strategy for non-critical assets like images,
 * balancing speed with freshness.
 */
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && /\.(jpe?g|png|svg|gif)$/i.test(url.pathname),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently-used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

/**
 * API CACHING FOR DICTIONARY
 * 
 * This rule caches requests to the Free Dictionary API.
 * This is a powerful feature that allows the puzzle validation to work
 * even when offline, provided the word has been looked up before.
 * 
 * Strategy: StaleWhileRevalidate
 * - Provides instant responses for previously validated words
 * - Ensures data stays reasonably fresh
 * 
 * Expiration:
 * - maxEntries: 100 (caches up to 100 word definitions)
 * - maxAgeSeconds: 1 day (keeps cache fresh)
 */
registerRoute(
  ({url}) => url.hostname === 'api.dictionaryapi.dev',
  new StaleWhileRevalidate({
    cacheName: 'dictionary-api',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100, // Cache up to 100 API responses
        maxAgeSeconds: 24 * 60 * 60, // Cache for 1 day
      }),
    ],
  })
);


/**
 * SERVICE WORKER LIFECYCLE
 * 
 * This message listener allows the app to skip the waiting phase
 * and activate the new service worker immediately. This is useful
 * for providing a "New version available, please refresh" prompt
 * to the user, ensuring they get the latest updates quickly.
 */
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here. 